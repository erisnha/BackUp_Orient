package com.newgen.exelicedup;

import java.awt.Color;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.faces.validator.ValidatorException;


import com.newgen.common.General;
import com.newgen.common.PicklistListenerHandler;
import com.newgen.omniforms.FormConfig;
import com.newgen.omniforms.FormReference;
import com.newgen.omniforms.component.PickList;
import com.newgen.omniforms.context.FormContext;
import com.newgen.omniforms.event.ComponentEvent;
import com.newgen.omniforms.event.FormEvent;
import com.newgen.omniforms.listener.FormListener;
import java.text.ParseException;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import sun.awt.windows.WBufferStrategy;

public class dupHead implements FormListener {

    //FormReference objFormReference = null; //FormContext.getCurrentInstance().getFormReference();
    FormReference formObject = null;
    FormConfig formConfig = null;
    String activityName = null;
    String engineName = null;
    String file_status = null;
    String dropvalue2 = null;
    String sessionId = null;
    String folderId = null;
    String serverUrl = null;
    String processInstanceId = null;
    String workItemId = null;
    String userName = null;
    String processDefId = null;
    String Query = null;
    List<List<String>> result;
    PickList objPicklist;
    General objGeneral = null;
    String prevsActivity = null ,processtype=null,q_chk_value=null;
    String second = null;
    
	
   /* public Head(FormReference formObject) {
        super();
        System.out.println("In COnstructor");
        this.formObject = formObject;
    } */

    @Override
    public void continueExecution(String arg0, HashMap<String, String> arg1) {
        // TODO Auto-generated method stub
    }

    @Override
    public void eventDispatched(ComponentEvent pEvent) throws ValidatorException {
        // TODO Auto-generated method stub
        System.out.println("Value Change Event :" + pEvent);
        System.out.println("pEvent.getType() :" + pEvent.getType());
        System.out.println("pEvent.getType().name() :" + pEvent.getType().name());
        formObject = FormContext.getCurrentInstance().getFormReference();
        formConfig = FormContext.getCurrentInstance().getFormConfig();
        objGeneral = new General();
        if (pEvent.getType().name().equalsIgnoreCase("VALUE_CHANGED")) {
            
          
              if(pEvent.getSource().getName().equalsIgnoreCase("file_status")){
                    file_status = formObject.getNGValue("file_status");
                    System.out.println("status values-------------->"+file_status);
                     if(activityName.equalsIgnoreCase("StartEvent1")){
                      
                         if(file_status.equalsIgnoreCase("File In Processing")){
                             Query = "select username from ng_user_details where roletype = 'Assistant officer'";
                             //objGeneral.setAssign(Query);
                               }
                          }
              
                     if(activityName.equalsIgnoreCase("Assistant officer")){
                        
                          if(file_status.equalsIgnoreCase("File In Processing")){
                             Query = "select username from ng_user_details where roletype = 'AEI'";
                             //objGeneral.setAssign(Query);
                            }
                         
                          }
                
                   if(activityName.equalsIgnoreCase("AEI")){
                         if(file_status.equalsIgnoreCase("File In Processing")){
                            Query = "select username from ng_user_details where roletype = 'Secretary'";
                           // objGeneral.setAssign(Query);
                            }
                         if(file_status.equalsIgnoreCase("Documents Not Completed")){
                             System.out.println("status value after document not completed-----" +file_status);
                            Query = "select username from ng_user_details where roletype = 'Assistant officer'";
                            //objGeneral.setAssign(Query);
                            }
                         }
                 if(activityName.equalsIgnoreCase("Secretary")){
                          if((file_status.equalsIgnoreCase("Approved")) || (file_status.equalsIgnoreCase("Not Approved")) 
                                    || (file_status.equalsIgnoreCase("Documents Not Completed"))){
                              Query = "select username from ng_user_details where roletype = 'Assistant officer'";
                            //  objGeneral.setAssign(Query);
                            }
                
                        }
                  objGeneral.setAssign(Query);
                     if(file_status.equalsIgnoreCase("")){
                    formObject.clear("assigned_to");
               }
              }
              if(pEvent.getSource().getName().equalsIgnoreCase("q_process_type")){
                    processtype = formObject.getNGValue("q_process_type");
                    System.out.println("value of processtype" +processtype);
                    if(processtype.equalsIgnoreCase("Duplicate Wireman Exemption ")){
                        formObject.setNGValue("Label144", "Duplicate Wireman Exemption");
                         System.out.println("value of processtype" +processtype);
                        }
                    if(processtype.equalsIgnoreCase("Duplicate Contractor License")){
                         formObject.setNGValue("Label144", "Duplicate Contractor License");
                        }
                    if(processtype.equalsIgnoreCase("Duplicate Supervisor examination")){
                        formObject.setNGValue("Label144", "Duplicate Supervisor examination");
                        }
                    if(processtype.equalsIgnoreCase("Duplicate Wireman examination")){
                        formObject.setNGValue("Label144", "Duplicate Supervisor examination");
                        }
                  
              }

        if (pEvent.getType().name().equalsIgnoreCase("MOUSE_CLICKED")) {
                
            if(pEvent.getSource().getName().equalsIgnoreCase("q_chk_value")){
                   q_chk_value =pEvent.getSource().getName();
                   System.out.println("value of chk box is ----->" +q_chk_value );
            
            }

            if (pEvent.getSource().getName().equalsIgnoreCase("btn_cghs_upload")) {
            }
          }
        }
      }
    
    @Override
    public void formLoaded(FormEvent arg0) {
        // TODO Auto-generated method stub
        System.out.println(" -------------------Intiation Workstep Loaded from formloaded.----------------");
        // TODO Auto-generated method stub
        System.out.println("form Loaded called");
        formObject = FormContext.getCurrentInstance().getFormReference();
        formConfig = FormContext.getCurrentInstance().getFormConfig();
        System.out.println("formObject :" + formObject);
        System.out.println("formConfig :" + formConfig);
         try {

            activityName = formObject.getWFActivityName();
            System.out.println("#####################ActivityName##############################3" + activityName);
            //capturing system fields----starts
            engineName = formConfig.getConfigElement("EngineName");
            sessionId = formConfig.getConfigElement("DMSSessionId");
            folderId = formConfig.getConfigElement("FolderId");
            serverUrl = formConfig.getConfigElement("ServletPath");
            //ServletUrl = serverUrl + "/servlet/ExternalServlet";
            processInstanceId = formConfig.getConfigElement("ProcessInstanceId");
            workItemId = formConfig.getConfigElement("WorkitemId");
            userName = formConfig.getConfigElement("UserName");
            processDefId = formConfig.getConfigElement("ProcessDefId");
            System.out.println("ProcessInstanceId===== " + processInstanceId);
            System.out.println("Activityname=====" + activityName);
            System.out.println("CabinetName====" + engineName);
            System.out.println("sessionId====" + sessionId);
            System.out.println("Username====" + userName);
            System.out.println("workItemId====" + workItemId);



        } catch (Exception e) {
            System.out.println("Exception in FieldValueBagSet::::" + e.getMessage());
        }
    }

    @Override
    public void formPopulated(FormEvent arg0) {
        // TODO Auto-generated method stub
        try {
            objGeneral = new General();
            System.out.println("----------------------Intiation Workstep Loaded from form populated.---------------------------");
            formObject = FormContext.getCurrentInstance().getFormReference();
            formConfig = FormContext.getCurrentInstance().getFormConfig();
            
            
            if(activityName.equalsIgnoreCase("StartEvent1")){
                formObject.addItem("file_status", "File In Processing");
               
                 }
            
            if(activityName.equalsIgnoreCase("Assistant officer")){
               prevsActivity= formObject.getNGValue("q_prevs_stage");
                if(prevsActivity.equalsIgnoreCase("StartEvent1")){
                  formObject.addItem("file_status", "File In Processing");
                    }
                if((prevsActivity.equalsIgnoreCase("Secretary"))&& (prevsActivity.equalsIgnoreCase("AEI"))){
                    formObject.addItem("file_status", "Query Sent To Applicant");
                    }
              
                }
                
            if(activityName.equalsIgnoreCase("AEI")){
                 formObject.addItem("file_status", "File In Processing");
                 formObject.addItem("file_status", "Documents Not Completed");
            
                } 
            if(activityName.equalsIgnoreCase("Secretary")){
                 formObject.addItem("file_status", "Approved");
                 formObject.addItem("file_status", "Documents Not Completed");
                 formObject.addItem("file_status", "Not Approved");
                }

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Exception in FieldValueBagSet::::" + e.getMessage());

        }
    }

    @Override
    public void saveFormCompleted(FormEvent arg0) throws ValidatorException {
        // TODO Auto-generated method stub
    }

    @Override
    public void saveFormStarted(FormEvent arg0) throws ValidatorException {
        // TODO Auto-generated method stub
        formObject = FormContext.getCurrentInstance().getFormReference();
        formConfig = FormContext.getCurrentInstance().getFormConfig();


    }

    @Override
    public void submitFormCompleted(FormEvent arg0) throws ValidatorException {
        // TODO Auto-generated method stub
        formObject = FormContext.getCurrentInstance().getFormReference();
        formConfig = FormContext.getCurrentInstance().getFormConfig();


    }

    @Override
    public void submitFormStarted(FormEvent arg0) throws ValidatorException {
        // TODO Auto-generated method stub
        formObject = FormContext.getCurrentInstance().getFormReference();
        formConfig = FormContext.getCurrentInstance().getFormConfig();
        System.out.print("-------------------submitform started---------");
     
             formObject.setNGValue("q_prevs_stage", activityName);
             formObject.setNGValue("q_prevs_status", file_status);
             
       }

    @Override
    public void initialize() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}

